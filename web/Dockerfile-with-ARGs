# syntax=docker/dockerfile:1

# FROM tomcat:jdk11-adoptopenjdk-hotspot
FROM tomcat:9.0.65-jdk11-temurin-jammy as base

# ARGS inserted using docker-repo/scripts/env2args.py script
ARG SITE_ADMIN_EMAIL=allenem@pennmedicine.upenn.edu@mail.com
ARG SECRET_KEY=erythrondb
ARG SITE_DOMAIN=localhost:8080
ARG GOOGLE_ANALYTICS_ID=NA
ARG WEB_DB_NAME=erythtst
ARG WEB_DB_USER=erythrondb
ARG WEB_DB_PASSWORD=ErythronDB2018

ARG WEBAPP=ErythronDB
ARG PROJECT_ID=ErythronDB

ENV SITE_HOME=/www/erythrondb
ENV COMMON_DIR=/www/common
ENV GUS_HOME=/www/erythrondb/gus_home
ENV PROJECT_HOME=/www/erythrondb/project_home

# install build dependencies
# TODO: specify versions for maven, nodejs, npm?
# allow the build container to cache directories for apt
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked && \
    apt-get update && apt-get install -y git maven nodejs npm ant python3-pip
    # clean up temp directories
	#&& apt-get clean && apt-get purge && \
	#rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Python Modules
# -------------------------------------------------
RUN pip3 install --no-cache-dir  \
    pandas scipy statsmodels wordcloud numpy seaborn


FROM base AS initialize-env

RUN mkdir -p $SITE_HOME/conf $SITE_HOME/gus_home/config $SITE_HOME/webapp \
    $SITE_HOME/cgi-bin $SITE_HOME/cgi-lib $SITE_HOME/htdocs \
    $COMMON_DIR/temp $COMMON_DIR/secret

WORKDIR $PROJECT_HOME

RUN git clone --depth 1 -b api-build-50 https://github.com/ErythronDB/WDK.git && \
    git clone --depth 1 -b api-build-50 https://github.com/ErythronDB/WDKClient.git && \
    git clone --depth 1 -b api-build-50 https://github.com/ErythronDB/install.git && \
    git clone --depth 1 -b api-build-50 https://github.com/ErythronDB/WSF.git && \
    git clone --depth 1 -b api-build-50 https://github.com/ErythronDB/FgpUtil.git && \
    git clone --depth 1 -b api-build-50 https://github.com/ErythronDB/EbrcModelCommon.git && \
    git clone --depth 1 -b api-build-50 https://github.com/ErythronDB/EbrcWebsiteCommon.git && \
    git clone --depth 1 -b api-build-50 https://github.com/ErythronDB/EbrcWebSvcCommon.git && \
    git clone --depth 1 https://github.com/ErythronDB/ErythronDBWebsite.git

WORKDIR $SITE_HOME

ENV PATH $PATH:$GUS_HOME/bin:$PROJECT_HOME/install/bin
ENV NODE_OPTIONS=--max_old_space_size=4096

RUN cp $PROJECT_HOME/install/gus.config.sample $GUS_HOME/config/gus.config && \
    # . == source
    . $PROJECT_HOME/install/bin/gusEnv.bash && \
    # set webapp properties
    cp $PROJECT_HOME/ErythronDBWebsite/Site/config/webapp.prop.sample $GUS_HOME/config/webapp.prop && \
    sed -i "s|@WEBAPP@|$WEBAPP|g" $GUS_HOME/config/webapp.prop && \
    sed -i "s|@PROJECT_ID@|$PROJECT_ID|g" $GUS_HOME/config/webapp.prop && \
    sed -i "s|@GOOGLE_ANALYTICS_ID@|$GOOGLE_ANALYTICS_ID|g" $GUS_HOME/config/webapp.prop
    # TODO: add production build flag to webapp.prop if $BUILD == "prod"


# Build Website
# -------------------------------------------------
# fix tomcat directory structure; see https://www.topzenith.com/2020/07/http-status-404-not-found-docker-tomcat-image.html
# modify config and settings files based on ARGS
# link postgres jdbc driver
# TODO: config tomcat for HTTPS

FROM initialize-env as build-web

RUN --mount=type=cache,target=/root/.m2 \
    bldw ErythronDBWebsite $GUS_HOME/config/webapp.prop && \
    rm -r $CATALINA_HOME/webapps && mv $CATALINA_HOME/webapps.dist/ $CATALINA_HOME/webapps && \
    ln -s $GUS_HOME/lib/java/db_driver/postgresql-42.2.14.jar $CATALINA_HOME/lib/postgresql-42.2.14.jar \
    && if [$BUILD = "prod"]; then rm -r $PROJECT_HOME; fi

RUN echo "Creating/modifying configuration files" && \
    # secret key file for cookie-based authentication
    cat $SECRET_KEY > $COMMON_DIR/secret/.wdk_key && \
    # model.props (specific for genome build b/c of third-party URLs)
    cp $GUS_HOME/config/$PROJECT_ID/model.prop.sample $GUS_HOME/config/$PROJECT_ID/model.prop && \
    sed -i "s|@WEBAPP@|${WEBAPP}|g" $GUS_HOME/config/$PROJECT_ID/model.prop && \
    sed -i "s|@SITE_ADMIN_EMAIL@|${SITE_ADMIN_EMAIL}|g" $GUS_HOME/config/$PROJECT_ID/model.prop && \
    sed -i "s|@PROJECT_ID@|${PROJECT_ID}|g" $GUS_HOME/config/$PROJECT_ID/model.prop && \
    # model-config
    cp $GUS_HOME/config/model-config.xml.sample $GUS_HOME/config/$PROJECT_ID/model-config.xml && \
    sed -i "s|@MODEL@|${PROJECT_ID}|g" $GUS_HOME/config/$PROJECT_ID/model-config.xml && \
    sed -i "s|@SITE_ADMIN_EMAIL@|${SITE_ADMIN_EMAIL}|g" $GUS_HOME/config/$PROJECT_ID/model-config.xml && \
    sed -i "s|@WEB_DB_USER@|${DB_WEB_USER}|g" $GUS_HOME/config/$PROJECT_ID/model-config.xml && \
    sed -i "s|@WEB_DB_PASSWORD@|${DB_WEB_PASSWORD}|g" $GUS_HOME/config/$PROJECT_ID/model-config.xml && \
    sed -i "s|@WEB_DB_HOST@|${DB_HOST}|g" $GUS_HOME/config/$PROJECT_ID/model-config.xml && \
    sed -i "s|@WEB_DB_PORT@|${DB_PORT}|g" $GUS_HOME/config/$PROJECT_ID/model-config.xml && \
    sed -i "s|@WEB_DB_NAME@|${DB_NAME}|g" $GUS_HOME/config/$PROJECT_ID/model-config.xml && \
    # tomcat-context.xml
    cp $GUS_HOME/config/tomcat-context.xml.sample $CATALINA_HOME/conf/Catalina/localhost/${WEBAPP}.xml && \
    sed -i "s|@MODEL@|${PROJECT_ID}|g" $CATALINA_HOME/conf/Catalina/localhost/${WEBAPP}.xml && \
    sed -i "s|@WEBAPP@|${WEBAPP}|g" $CATALINA_HOME/conf/Catalina/localhost/${WEBAPP}.xml
